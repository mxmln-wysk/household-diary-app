import { app, BrowserWindow } from 'electron';
import { ipcMain } from 'electron';
import fs from 'fs';

// This allows TypeScript to pick up the magic constant that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) { // eslint-disable-line global-require
  app.quit();
}

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      nodeIntegration: true,
      contextIsolation: false
  }
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  mainWindow.webContents.openDevTools();
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.C
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
 
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.

//colors
//listens for get Color event
//reads Colors from File and sends it to Frontend
ipcMain.handle('getColors', () => {
  const result = fs.readFileSync('./src/preferences/colors.json', 'utf8');
  return result;
})

//listener for save color event
// saves color to file
ipcMain.on('color', (event, arg) => {
    try {
      fs.writeFileSync('./src/preferences/colors.json', JSON.stringify(arg))
    } catch (err) {
      console.error(err)
    }
});

//listens for get Category event
//reads Category from File and sends it to Frontend
ipcMain.handle('getCategory', () => {
  const result = fs.readFileSync('./src/preferences/categories.json', 'utf8');
  return result;
})

// saves Category to file
ipcMain.on('setCategory', (event, arg) => {
    try {
      fs.writeFileSync('./src/preferences/categories.json', JSON.stringify(arg))
    } catch (err) {
      console.error(err)
    }
});





// Month Data
// get Month Date

  ipcMain.handle('getMonth', (event, arg) => {
    if(fs.existsSync(`./src/data/${arg}.json`)){
      const result = fs.readFileSync(`./src/data/${arg}.json`, 'utf8');
      return result;
    } else {

      fs.writeFile(`./src/data/${arg}.json`,'', (err) => {
        if (err) throw err;
      });
      return null;
    }
});

ipcMain.on('setMonthDate', (event, arg) => {
  try {
    fs.writeFileSync(`./src/data/${arg.date.slice(0,7)}.json`, JSON.stringify(arg))
  } catch (err) {
    console.error(err)
  }
});

ipcMain.on('saveMonthData', (event, arg) => {
  try {
    fs.writeFileSync(`./src/data/${arg.data[0].date.slice(0,7)}.json`, JSON.stringify(arg));
  } catch (err) {
    console.error(err)
  }
});

